//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputHub.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputHub: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputHub()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputHub"",
    ""maps"": [
        {
            ""name"": ""BallSwipe "",
            ""id"": ""9719ba67-ef8a-4e95-a2fd-7aaa70519ca2"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""83ef6589-7c64-4439-8f54-fea95606d007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""0db80768-4bdb-42f5-9843-32e65691f23e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a885bcb-bf7d-4667-b521-ff3ac2097f79"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6f96273-5092-4e91-a965-1df69b2baf30"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BallSwipe 
        m_BallSwipe = asset.FindActionMap("BallSwipe ", throwIfNotFound: true);
        m_BallSwipe_Tap = m_BallSwipe.FindAction("Tap", throwIfNotFound: true);
        m_BallSwipe_TapPosition = m_BallSwipe.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BallSwipe 
    private readonly InputActionMap m_BallSwipe;
    private List<IBallSwipeActions> m_BallSwipeActionsCallbackInterfaces = new List<IBallSwipeActions>();
    private readonly InputAction m_BallSwipe_Tap;
    private readonly InputAction m_BallSwipe_TapPosition;
    public struct BallSwipeActions
    {
        private @InputHub m_Wrapper;
        public BallSwipeActions(@InputHub wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_BallSwipe_Tap;
        public InputAction @TapPosition => m_Wrapper.m_BallSwipe_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_BallSwipe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallSwipeActions set) { return set.Get(); }
        public void AddCallbacks(IBallSwipeActions instance)
        {
            if (instance == null || m_Wrapper.m_BallSwipeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallSwipeActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
        }

        private void UnregisterCallbacks(IBallSwipeActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
        }

        public void RemoveCallbacks(IBallSwipeActions instance)
        {
            if (m_Wrapper.m_BallSwipeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallSwipeActions instance)
        {
            foreach (var item in m_Wrapper.m_BallSwipeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallSwipeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallSwipeActions @BallSwipe => new BallSwipeActions(this);
    public interface IBallSwipeActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
